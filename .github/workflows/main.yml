# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.8 ]
    env:
      DOCKER_IMAGE: tan4ek/extract-merge-subtitles
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_TARGET_PLATFORM: linux/arm64
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-warn-script-location -r requirements.txt
          sudo apt-get install mkvtoolnix
      - name: Run unittests
        run: |
          python -m unittest discover
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Docker Login
        if: success()
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
      - name: Build & push amd64 version
        if: success()
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./Dockerfile
          platforms: linux/amd64,linux/386
          tags: tan4ek/extract-merge-subtitles:latest
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Create docker file for arm64 platform
        run: |
          cp ./Dockerfile ./Dockerfile.arm64 && sed -i 's/FROM python:/FROM arm64v8\/python:/' ./Dockerfile.arm64
      - name: Build & push arm64 version
        if: success()
        run: |
          docker buildx build \
          --platform linux/arm64 \
          --tag tan4ek/extract-merge-subtitles:arm64 \
          --file ./Dockerfile.arm64 \
          --output type=image,push=true .
